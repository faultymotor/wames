{"version":3,"file":"Server.js","sourceRoot":"","sources":["../src/Server.ts"],"names":[],"mappings":"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","sourcesContent":["import { AnagramObject, AnagramState, User } from '../types';\r\n\r\nimport DB from './Database';\r\n\r\nimport * as express from 'express';\r\nimport * as io from 'socket.io';\r\nimport * as http from 'http';\r\n\r\nimport { Socket } from 'socket.io';\r\nimport * as AUtil from './util/Anagram.js';\r\n\r\nenum Events {\r\n    ERROR = 'error',\r\n    REGISTER_USER = 'register-user',\r\n    NEW_GAMES = 'new-games',\r\n    CREATE_GAME = 'create-game',\r\n    SET_USERNAME = 'user-id',\r\n    UPDATE_GAME_STATE = 'update-game-state'\r\n}\r\n\r\ninterface LooseSocket extends Socket {\r\n    registered: boolean,\r\n    user: User\r\n}\r\n\r\nexport default class Server {\r\n    private app;\r\n    private server;\r\n    private io;\r\n\r\n    private sockets_list: LooseSocket[] = [];\r\n\r\n    constructor() {\r\n        this.setListeners = this.setListeners.bind(this);\r\n\r\n        this.app = express();\r\n        this.server = http.createServer(this.app);\r\n        this.io = io(this.server);\r\n\r\n        this.app.get('/', (req, res) => {\r\n            res.sendFile(__dirname + './index.html');\r\n        });\r\n\r\n        const port = process.env.PORT || 3000;\r\n\r\n        this.server.listen(port, () => console.log(\"Listening on port \", port));\r\n\r\n        this.io.on('connection', this.setListeners);\r\n    }\r\n\r\n    setListeners(socket: LooseSocket) {\r\n        console.log('A socket connected from ', socket.handshake.address);\r\n\r\n        socket.on(Events.REGISTER_USER, (user_id: string, callback: (ret: User | Error) => void) => {\r\n            console.log('Registering user: ', user_id);\r\n\r\n            DB.registerUser(user_id, res => {\r\n                console.log('Resolved user: ', res);\r\n\r\n                    if (!(res instanceof Error)) {\r\n                        socket.user = res;\r\n                        socket.registered = true;\r\n\r\n                        this.sockets_list.push(socket);\r\n\r\n                        DB.getUserAnagramGames(res, (games: AnagramObject[]) => {\r\n                            socket.emit(Events.NEW_GAMES, games);\r\n                        });\r\n                    }\r\n\r\n                    callback(res);\r\n                });\r\n\r\n        });\r\n\r\n        socket.on(Events.CREATE_GAME, (target_usernames: string[], callback: (game: AnagramObject) => void) => {\r\n            console.log('Creating game from: ', socket.user.username, ' for: ', target_usernames);\r\n\r\n            DB.getUsersByName(target_usernames, (users: User[]) => {\r\n                let target_users = users;\r\n                target_users.push(socket.user);\r\n\r\n                const game = AUtil.generateGame(target_users);\r\n\r\n                DB.createAnagramGame(game, (db_game: AnagramObject) => {\r\n                    const room = db_game.uuid;\r\n\r\n                    this.sockets_list.filter(list_socket =>\r\n                        target_users.map(target_user => target_user.user_id).includes(list_socket.user.user_id))\r\n                        .forEach(target_socket => {\r\n                            console.log(target_socket.user.username, ' joined game ', db_game.uuid);\r\n                            target_socket.join(room);\r\n                        });\r\n\r\n                    socket.broadcast.to(room).emit(Events.NEW_GAMES, [db_game]);\r\n\r\n                    callback(game);\r\n                });\r\n            });\r\n        });\r\n\r\n        socket.on(Events.SET_USERNAME, (username: string, callback: (res: User | Error) => void) => {\r\n            console.log('Setting username for: ', socket.user.username, ' to: ', username);\r\n\r\n            const new_user: User = {\r\n                user_id: socket.user.user_id,\r\n                username: username\r\n            };\r\n\r\n            DB.setUsername(new_user, (res: User | Error) => {\r\n                if (!(res instanceof Error)) {\r\n                    socket.user = new_user;\r\n                }\r\n\r\n                callback(res);\r\n            });\r\n        });\r\n\r\n        socket.on(Events.UPDATE_GAME_STATE, (uuid: string, new_state: AnagramState) => {\r\n            console.log('Updating game id ', uuid, ' from: ', socket.user.username, ' with: ', new_state);\r\n\r\n            const unview: boolean = !(Object.keys(new_state).length == 1 && Object.keys(new_state)[0] == 'viewed');\r\n\r\n            DB.updateAnagramGame(socket.user, uuid, new_state, () => {\r\n                socket.broadcast.to(uuid).emit(Events.UPDATE_GAME_STATE, uuid, socket.user, new_state, unview);\r\n            });\r\n        });\r\n\r\n        socket.on('disconnect', () => {\r\n            console.log('A user disconnected!');\r\n\r\n            //this.sockets = this.sockets.filter(list_socket => !list_socket.disconnected);\r\n        });\r\n    }\r\n}"]}