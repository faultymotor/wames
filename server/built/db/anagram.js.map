{"version":3,"file":"anagram.js","sourceRoot":"","sources":["../../src/db/anagram.ts"],"names":[],"mappings":";;AACA,6BAAsB;AACtB,gCAAsC;AAEtC,SAAgB,iBAAiB,CAAC,WAAmC,EAAE,QAAuC;IAC1G,YAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC;SAC1B,IAAI,CAAC,QAAQ,CAAC;SACd,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC9B,CAAC;AAJD,8CAIC;AAED,SAAgB,iBAAiB,CAAC,aAAmB,EAAE,OAAe,EAAE,aAA2B,EAAE,QAA0D;IAC3J,YAAE,CAAC,QAAQ,CAAC,gBAAgB,CACxB,EAAE,GAAG,EAAE,OAAO,EAAE,EAChB,EAAE,IAAI,EAAE,EAAC,CAAC,SAAS,GAAG,aAAa,CAAC,OAAO,CAAC,EAAE,aAAa,EAAC,EAAE,CACjE;SACI,IAAI,CAAC,QAAQ,CAAC;SACd,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC9B,CAAC;AAPD,8CAOC;AAED,SAAgB,uBAAuB,CAAC,IAAU,EAAE,OAAe;IAC/D,YAAE,CAAC,QAAQ,CAAC,gBAAgB,CACxB,EAAE,GAAG,EAAE,OAAO,EAAE,EAChB,EAAE,IAAI,EAAE,EAAC,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,EAAE,IAAI,EAAE,EAAC,CAC3D;SACI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC9B,CAAC;AAND,0DAMC;AAED,SAAgB,mBAAmB,CAAC,IAAU,EAAE,QAAyC;IACrF,YAAE,CAAC,QAAQ,CAAC,IAAI,CAAC;QACb,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;KAChD,CAAC;SACG,IAAI,CAAC,QAAQ,CAAC;SACd,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC9B,CAAC;AAND,kDAMC;AAED,SAAgB,eAAe,CAAC,EAAU,EAAE,IAAU,EAAE,QAA6C;IACjG,YAAE,CAAC,QAAQ,CAAC,gBAAgB,CACxB,EAAE,GAAG,EAAE,EAAE,EAAE,EACX,EAAE,IAAI,EAAE,EAAE,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,kBAAY,EAAE,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,CACjF;SACI,IAAI,CAAC,QAAQ,CAAC;SACd,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC9B,CAAC;AAPD,0CAOC;AAED,SAAgB,cAAc,CAAC,EAAU,EAAE,QAA6C;IACpF,YAAE,CAAC,QAAQ,CAAC,OAAO,CACf,EAAE,GAAG,EAAE,EAAE,EAAE,CACd;SACI,IAAI,CAAC,QAAQ,CAAC;SACd,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC9B,CAAC;AAND,wCAMC","sourcesContent":["import { AnagramObject, AnagramState, User } from '../ts';\r\nimport DB from './DB';\r\nimport { defaultState } from '../api';\r\n\r\nexport function createAnagramGame(game_object: Partial<AnagramObject>, callback?: (doc: AnagramObject) => void) {\r\n    DB.anagrams.insert(game_object)\r\n        .then(callback)\r\n        .catch(console.error);\r\n}\r\n\r\nexport function updateAnagramGame(updating_user: User, game_id: string, updated_state: AnagramState, callback: (updated_doc: AnagramObject | undefined) => void) {\r\n    DB.anagrams.findOneAndUpdate(\r\n        { _id: game_id },\r\n        { $set: {['states.' + updating_user.user_id]: updated_state} }\r\n    )\r\n        .then(callback)\r\n        .catch(console.error);\r\n}\r\n\r\nexport function markAnagramGameAsViewed(user: User, game_id: string) {\r\n    DB.anagrams.findOneAndUpdate(\r\n        { _id: game_id },\r\n        { $set: {['states.' + user.user_id + '.viewed']: true }}\r\n    )\r\n        .catch(console.error);\r\n}\r\n\r\nexport function getUserAnagramGames(user: User, callback: (docs: AnagramObject[]) => void) {\r\n    DB.anagrams.find({\r\n        ['states.' + user.user_id]: { $exists: true }\r\n    })\r\n        .then(callback)\r\n        .catch(console.error);\r\n}\r\n\r\nexport function joinAnagramGame(id: string, user: User, callback: (doc: AnagramObject | null) => void) {\r\n    DB.anagrams.findOneAndUpdate(\r\n        { _id: id },\r\n        { $set: { ['states.' + user.user_id]: defaultState }, $push: { users: user } },\r\n    )\r\n        .then(callback)\r\n        .catch(console.error);\r\n}\r\n\r\nexport function getAnagramGame(id: string, callback: (doc: AnagramObject | null) => void) {\r\n    DB.anagrams.findOne(\r\n        { _id: id }\r\n    )\r\n        .then(callback)\r\n        .catch(console.error);\r\n}"]}