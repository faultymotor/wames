{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from 'express';\r\nimport * as http from 'http';\r\nimport { Socket } from 'socket.io';\r\nimport * as IO from 'socket.io';\r\n\r\nimport { Acknowledgement, AnagramObject, AnagramState, DecoratedSocket, User } from './ts';\r\nimport { generateGame, isError, log } from './api';\r\nimport {\r\n    createAnagramGame,\r\n    getAnagramGame,\r\n    getUserAnagramGames,\r\n    getUsersByName,\r\n    joinAnagramGame, markAnagramGameAsViewed,\r\n    registerUser, setUsername, updateAnagramGame\r\n} from './db';\r\n\r\nconst port = process.env.PORT || 3000;\r\n\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst io = IO(server);\r\n\r\nserver.listen(port, () => log('Server listening on port ', port));\r\n\r\napp.get('/', (req, res) => {\r\n    res.sendFile(__dirname + './index.html');\r\n});\r\n\r\nenum Events {\r\n    ERROR = 'error',\r\n    REQUEST_IDENTIFIER = 'req-id',\r\n    REGISTER_USER = 'register-user',\r\n    DATA='data',\r\n    NEW_GAMES = 'new-games',\r\n    CREATE_GAME = 'create-game',\r\n    SET_USERNAME = 'user-id',\r\n    UPDATE_GAME_STATE = 'update-game-state',\r\n    MARK_AS_VIEWED = 'view',\r\n    JOIN_GAME = 'join',\r\n}\r\n\r\nlet sockets = [] as DecoratedSocket[];\r\n\r\nconst register_user = (identifier: string, socket: Socket, next: Function) => {\r\n    log('Registering user: ', identifier);\r\n\r\n    registerUser(identifier,res => {\r\n        if (isError(res)) {\r\n            socket.emit(Events.ERROR, res as Error);\r\n            return;\r\n        }\r\n\r\n        log('Resolved user: ', res);\r\n\r\n        socket['user'] = res;\r\n\r\n        sockets.push(socket as DecoratedSocket);\r\n\r\n        getUserAnagramGames(res as User, (games: AnagramObject[]) => {\r\n            socket.emit(Events.DATA, res, games);\r\n        });\r\n\r\n        next();\r\n    });\r\n}\r\n\r\nio.use((socket: Socket, next) => {\r\n    log('A socket is attempting to connect from ', socket.handshake.address);\r\n\r\n    const handshake_data = socket.request;\r\n\r\n    if (handshake_data._query.deviceid) {\r\n        register_user(handshake_data._query.deviceid, socket, next);\r\n    } else {\r\n        socket.disconnect();\r\n    }\r\n});\r\n\r\nio.on('connection', (socket: DecoratedSocket) => {\r\n    log(socket.user.username, 'connected from', socket.handshake.address);\r\n\r\n    socket.on(Events.CREATE_GAME, (target_usernames: string[], callback: Acknowledgement<AnagramObject>) => {\r\n        log('Creating game from: ', socket.user.username, ' for: ', target_usernames);\r\n\r\n        getUsersByName(target_usernames, (users: User[]) => {\r\n            let target_users = users;\r\n            target_users.push(socket.user);\r\n\r\n            const game = generateGame(target_users);\r\n\r\n            createAnagramGame(game, (db_game: AnagramObject) => {\r\n                const room = db_game._id;\r\n\r\n                sockets.filter(list_socket =>\r\n                    target_users.map(target_user => target_user.user_id).includes(list_socket.user.user_id))\r\n                    .forEach(target_socket => {\r\n                        log(target_socket.user.username, ' joined game ', db_game._id);\r\n                        target_socket.join(room);\r\n                    });\r\n\r\n                socket.broadcast.to(room).emit(Events.NEW_GAMES, [db_game]);\r\n\r\n                callback(db_game);\r\n            });\r\n        });\r\n    });\r\n\r\n    socket.on(Events.JOIN_GAME, (id: string, callback: Acknowledgement<AnagramObject>) => {\r\n        if (!socket['user']) {\r\n            callback(new Error('User not registered!'));\r\n        } else {\r\n            log('Joining game ', id, ' for user ', socket.user.username);\r\n\r\n            getAnagramGame(id, game => {\r\n                if (game.users.some(user => user.user_id === socket.user.user_id)) {\r\n                    callback(new Error('Already in game!'));\r\n                } else {\r\n                    joinAnagramGame(id, socket.user, isError ? callback : (res: AnagramObject | null) => {\r\n                        socket.broadcast.to(res._id).emit(Events.UPDATE_GAME_STATE, id, socket.user, res.states[socket.user.user_id]);\r\n\r\n                        callback(res);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    socket.on(Events.SET_USERNAME, (username: string, callback: Acknowledgement<User>) => {\r\n        if (!socket['user']) {\r\n            callback(new Error('User not registered!'));\r\n        } else {\r\n            log('Setting username for: ', socket.user.username, ' to: ', username);\r\n\r\n            const new_user: User = {\r\n                user_id: socket.user.user_id,\r\n                username: username\r\n            };\r\n\r\n            setUsername(new_user, (res: User | Error) => {\r\n                if (!(res instanceof Error)) {\r\n                    socket.user = new_user;\r\n                }\r\n\r\n                callback(res as User);\r\n            });\r\n        }\r\n    });\r\n\r\n    socket.on(Events.UPDATE_GAME_STATE, (_id: string, new_state: AnagramState, callback: Acknowledgement<boolean>) => {\r\n        if (!socket['user']) {\r\n            callback(new Error('User not registered!'));\r\n        } else {\r\n            log('Updating game id ', _id, ' from: ', socket.user.username, ' with: ', new_state);\r\n\r\n            updateAnagramGame(socket.user, _id, new_state, () => {\r\n                socket.broadcast.to(_id).emit(Events.UPDATE_GAME_STATE, _id, socket.user, new_state);\r\n            });\r\n\r\n            callback(true);\r\n        }\r\n    });\r\n\r\n    socket.on(Events.MARK_AS_VIEWED, (_id: string, callback: Acknowledgement<boolean>) => {\r\n        if (!socket['user']) {\r\n            callback(new Error('User not registered!'));\r\n        } else {\r\n            log('Marking game id ', _id, ' as viewed for ', socket.user.username);\r\n\r\n            markAnagramGameAsViewed(socket.user, _id);\r\n\r\n            callback(true);\r\n        }\r\n    });\r\n\r\n    socket.on('disconnect', () => {\r\n        log('A user disconnected!');\r\n\r\n        //this.sockets = this.sockets.filter(list_socket => !list_socket.disconnected);\r\n    });\r\n});\r\n\r\n\r\n"]}