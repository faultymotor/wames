{"version":3,"file":"Database.js","sourceRoot":"","sources":["../src/Database.ts"],"names":[],"mappings":"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","sourcesContent":["import { AnagramObject, AnagramState, User } from '../types';\r\n\r\nimport monk, { IMonkManager, ICollection } from 'monk';\r\nimport { uniqueNamesGenerator, adjectives, animals, Config } from 'unique-names-generator';\r\n\r\nconst name_config: Config = {\r\n    dictionaries: [adjectives, animals],\r\n    separator: '',\r\n    style: 'capital',\r\n    length: 2\r\n};\r\n\r\nclass DB {\r\n    private db: IMonkManager = monk(process.env.DB_URI);\r\n    private anagrams: ICollection;\r\n    private users: ICollection;\r\n\r\n    constructor() {\r\n        this.anagrams = this.db.get('anagram-games');\r\n        this.users = this.db.get('users');\r\n    }\r\n\r\n    // ANAGRAM METHODS\r\n    createAnagramGame(game_object: Partial<AnagramObject>, callback?: (doc: AnagramObject) => void) {\r\n        this.anagrams.insert(game_object)\r\n            .then(callback)\r\n            .catch(console.error);\r\n    }\r\n\r\n    updateAnagramGame(updating_user: User, game_uuid: string, updated_state: AnagramState, callback: (updated_doc: AnagramObject | undefined) => void) {\r\n        this.anagrams.findOneAndUpdate(\r\n            { uuid: game_uuid },\r\n            { $set: {['states.' + updating_user.user_id]: updated_state} }\r\n        )\r\n            .then(callback)\r\n            .catch(console.error);\r\n    }\r\n\r\n    getUserAnagramGames(user: User, callback: (docs: AnagramObject[]) => void) {\r\n        this.anagrams.find({\r\n            ['states.' + user.user_id]: { $exists: true }\r\n        })\r\n            .then(callback)\r\n            .catch(console.error);\r\n    }\r\n\r\n    generateUsername(callback: (username: string) => void) {\r\n        let username = uniqueNamesGenerator(name_config);\r\n\r\n        this.users.find({\r\n            username: username,\r\n        }).then((docs: User[]) => {\r\n            if (docs.length > 0) {\r\n                this.generateUsername(callback);\r\n            } else {\r\n                callback(username);\r\n            }\r\n        });\r\n    };\r\n\r\n    // USER METHODS\r\n    registerUser(user_id: string, callback: (res: User | Error) => void) {\r\n        this.users.find({\r\n            user_id: user_id\r\n        })\r\n            .then(docs => {\r\n                if (docs.length > 0) {\r\n                    callback(docs[0]);\r\n                } else {\r\n                    this.generateUsername(username => {\r\n                        this.users.insert({\r\n                            user_id: user_id,\r\n                            username: username,\r\n                        })\r\n                            .then(callback)\r\n                            .catch(console.error);\r\n                    });\r\n                }\r\n            })\r\n            .catch(console.error);\r\n    }\r\n\r\n    setUsername(user: User, callback: (res: User | Error) => void) {\r\n        if (user.username === '') callback(Error(\"Username cannot be empty!\"));\r\n\r\n        this.users.find({\r\n            username: user.username\r\n        })\r\n            .then((docs: User[]) => {\r\n                if (docs.length > 0) {\r\n                    callback(Error(\"Username is taken! \" + docs[0].username))\r\n                } else {\r\n                    this.users.findOneAndUpdate(\r\n                        {user_id: user.user_id},\r\n                        {$set: {username: user.username}}\r\n                    )\r\n                        .then(callback)\r\n                        .catch(console.error);\r\n                }\r\n            })\r\n            .catch(console.error);\r\n    }\r\n\r\n    getUserByName(username: string, callback: (user: User) => void) {\r\n        this.users.findOne({\r\n            username: username\r\n        })\r\n            .then(callback)\r\n            .catch(console.error);\r\n    }\r\n\r\n    getUsersByName(usernames: string[], callback: (users: User[]) => void) {\r\n        this.users.find({\r\n            $or: usernames.reduce((acc: Partial<User>[], cur: string) => {\r\n                acc.push({\r\n                    username: cur\r\n                });\r\n\r\n                return acc;\r\n            }, [])\r\n        })\r\n            .then(callback)\r\n            .catch(console.error);\r\n    }\r\n}\r\n\r\nexport default new DB();"]}